package com.patrones.creacionales.builder;

/**
 * PATR√ìN BUILDER
 * 
 * Prop√≥sito: Construir objetos complejos paso a paso.
 * Permite crear diferentes representaciones del mismo objeto.
 * 
 * Cu√°ndo usar:
 * - Cuando un objeto tiene muchos par√°metros opcionales
 * - Cuando quieres crear objetos paso a paso
 * - Cuando necesitas diferentes variaciones del mismo objeto
 * - Para hacer el c√≥digo m√°s legible y mantenible
 * 
 * Interfaz abstracta que define los pasos para construir una pizza
 */
public abstract class PizzaBuilder {
    
    protected Pizza pizza;
    
    /**
     * Inicializar una nueva pizza
     */
    public void crearNuevaPizza() {
        this.pizza = new Pizza();
        System.out.println("üçï Iniciando construcci√≥n de nueva pizza...");
    }
    
    /**
     * M√©todos abstractos que cada builder concreto debe implementar
     */
    public abstract void construirMasa();
    public abstract void construirSalsa();
    public abstract void construirIngredientes();
    
    /**
     * M√©todos opcionales con implementaci√≥n por defecto
     */
    public void agregarQuesoExtra() {
        pizza.setQuesoExtra(true);
        System.out.println("   ‚úì Agregando queso extra");
    }
    
    public void agregarOrillaRellena() {
        pizza.setOrillaRellena(true);
        System.out.println("   ‚úì Agregando orilla rellena");
    }
    
    public void establecerTama√±o(String tama√±o) {
        pizza.setTama√±o(tama√±o);
        System.out.println("   ‚úì Estableciendo tama√±o: " + tama√±o);
    }
    
    /**
     * M√©todo para obtener la pizza construida
     */
    public Pizza obtenerPizza() {
        System.out.println("‚úÖ Pizza construida exitosamente\n");
        return pizza;
    }
}
